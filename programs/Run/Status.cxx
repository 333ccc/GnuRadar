// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Status.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gnuradar {

namespace {

const ::google::protobuf::Descriptor* StatusMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Status_2eproto() {
  protobuf_AddDesc_Status_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Status.proto");
  GOOGLE_CHECK(file != NULL);
  StatusMessage_descriptor_ = file->message_type(0);
  static const int StatusMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusMessage, buffer_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusMessage, write_buffer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusMessage, read_buffer_),
  };
  StatusMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusMessage_descriptor_,
      StatusMessage::default_instance_,
      StatusMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Status_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusMessage_descriptor_, &StatusMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Status_2eproto() {
  delete StatusMessage::default_instance_;
  delete StatusMessage_reflection_;
}

void protobuf_AddDesc_Status_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Status.proto\022\010gnuradar\"^\n\rStatusMessag"
    "e\022\014\n\004name\030\001 \002(\t\022\024\n\014buffer_depth\030\002 \002(\005\022\024\n"
    "\014write_buffer\030\003 \002(\005\022\023\n\013read_buffer\030\004 \002(\005", 120);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Status.proto", &protobuf_RegisterTypes);
  StatusMessage::default_instance_ = new StatusMessage();
  StatusMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Status_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Status_2eproto {
  StaticDescriptorInitializer_Status_2eproto() {
    protobuf_AddDesc_Status_2eproto();
  }
} static_descriptor_initializer_Status_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int StatusMessage::kNameFieldNumber;
const int StatusMessage::kBufferDepthFieldNumber;
const int StatusMessage::kWriteBufferFieldNumber;
const int StatusMessage::kReadBufferFieldNumber;
#endif  // !_MSC_VER

StatusMessage::StatusMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatusMessage::InitAsDefaultInstance() {
}

StatusMessage::StatusMessage(const StatusMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatusMessage::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buffer_depth_ = 0;
  write_buffer_ = 0;
  read_buffer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusMessage::~StatusMessage() {
  SharedDtor();
}

void StatusMessage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void StatusMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusMessage_descriptor_;
}

const StatusMessage& StatusMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Status_2eproto();  return *default_instance_;
}

StatusMessage* StatusMessage::default_instance_ = NULL;

StatusMessage* StatusMessage::New() const {
  return new StatusMessage;
}

void StatusMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    buffer_depth_ = 0;
    write_buffer_ = 0;
    read_buffer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buffer_depth;
        break;
      }
      
      // required int32 buffer_depth = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffer_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffer_depth_)));
          set_has_buffer_depth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_write_buffer;
        break;
      }
      
      // required int32 write_buffer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_write_buffer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &write_buffer_)));
          set_has_write_buffer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_read_buffer;
        break;
      }
      
      // required int32 read_buffer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_buffer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &read_buffer_)));
          set_has_read_buffer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatusMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 buffer_depth = 2;
  if (has_buffer_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buffer_depth(), output);
  }
  
  // required int32 write_buffer = 3;
  if (has_write_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->write_buffer(), output);
  }
  
  // required int32 read_buffer = 4;
  if (has_read_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->read_buffer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatusMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int32 buffer_depth = 2;
  if (has_buffer_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buffer_depth(), target);
  }
  
  // required int32 write_buffer = 3;
  if (has_write_buffer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->write_buffer(), target);
  }
  
  // required int32 read_buffer = 4;
  if (has_read_buffer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->read_buffer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatusMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 buffer_depth = 2;
    if (has_buffer_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffer_depth());
    }
    
    // required int32 write_buffer = 3;
    if (has_write_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->write_buffer());
    }
    
    // required int32 read_buffer = 4;
    if (has_read_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->read_buffer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusMessage::MergeFrom(const StatusMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_buffer_depth()) {
      set_buffer_depth(from.buffer_depth());
    }
    if (from.has_write_buffer()) {
      set_write_buffer(from.write_buffer());
    }
    if (from.has_read_buffer()) {
      set_read_buffer(from.read_buffer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusMessage::CopyFrom(const StatusMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void StatusMessage::Swap(StatusMessage* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(buffer_depth_, other->buffer_depth_);
    std::swap(write_buffer_, other->write_buffer_);
    std::swap(read_buffer_, other->read_buffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusMessage_descriptor_;
  metadata.reflection = StatusMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gnuradar

// @@protoc_insertion_point(global_scope)
