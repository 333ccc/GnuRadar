// Copyright (c) 2010 Ryan Seal <rlseal -at- gmail.com>
//
// This file is part of GnuRadar Software.
//
// GnuRadar is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//  
// GnuRadar is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with GnuRadar.  If not, see <http://www.gnu.org/licenses/>.
#ifndef START_HPP
#define START_HPP

#include <gnuradar/ConfigFile.h>
#include <gnuradar/GnuRadarCommand.h>
#include <gnuradar/ProducerConsumerModel.h>
#include <gnuradar/ProducerThread.h>
#include <gnuradar/ConsumerThread.h>

namespace gnuradar {
namespace command {

class Start : public GnuRadarCommand {

    static const int NUM_BUFFERS = 20;

    // setup shared pointers to extend life beyond this call
    typedef boost::shared_ptr< ProducerConsumerModel > ProducerConsumerModelPtr;
    ProducerConsumerModel pcModel_;
    typedef boost::shared_ptr< ProducerThread > ProducerThreadPtr;
    typedef boost::shared_ptr< ConsumerThread > ConsumerThreadPtr;

    // pull settings from the configuration file
    const GnuRadarSettings GetSettings( ConfigFile& config ) {

        GnuRadarSettings settings;

        //Program GNURadio
        for ( int i = 0; i < cf.NumChannels(); ++i ) {
            settings.Tune ( i, cf.DDC ( i ) );
        }

        settings.numChannels    = cf.NumChannels();
        settings.decimationRate = cf.Decimation();
        settings.fpgaFileName   = cf.FPGAImage();

        //change these as needed
        settings.fUsbBlockSize  = 0;
        settings.fUsbNblocks    = 0;
        settings.mux            = 0xf0f0f1f0;

        return settings;
    }

public:

    Start( ProducerConsumerModelPtr pcModel, std::string& fileName ): 
       pcModel_( pcModel ) {

        ConfigFile configFile( fileName );
        const int bufferSize = cf.BytesPerSecond();

        // create a device to communicate with hardware
        GnuRadarDevicePtr grDevice(
            new GnuRadarDevice( GetSettings( configFile ))
                              );

            // setup producer thread
            gnuradar::ProducerThreadPtr producerThread (
                new ProducerThread ( bufferSize , grDevice )
            );

            // setup consumer thread
            gnuradar::ConsumerThreadPtr consumerThread (
                new ConsumerThread ( bufferSize , buffer, h5File, dimVector )
            );

            // create a producer/consumer model for streaming data
            pcModel = gnuradar::ProducerConsumerModelPtr(
                          new ProducerConsumerModel(
                              "GnuRadar",
                              NUM_BUFFERS,
                              bufferSize,
                              producerThread,
                              consumerThread
                             )
               );
       }


    virtual void Execute( std::string& args )
    {
       // start consumer thread
       pcModel.RequestData();

       // start producer thread
       pcModel.Start();

    }

};
};
